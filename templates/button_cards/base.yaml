---
variables:
  state: >
    [[[ return entity === undefined || entity.state; ]]]
  timeout: >
    [[[ return entity === undefined || Date.now() - Date.parse(entity.last_changed); ]]]
  consider_on: >
    [[[
      var state = entity === undefined || entity.state;
      return (
        state == 'on' ||
        state == 'home' ||
        state == 'cool' ||
        state == 'fan_only' ||
        state == 'playing'
      );
    ]]]
aspect_ratio: 1/1
show_state: true
show_icon: false
state_display: >
  [[[ if (variables.state === true) return 'Unknown'; ]]]
tap_action:
  animation_card: |
    [[[
      const animation_speed_ms = 900;
      const animation = `card_bounce ${animation_speed_ms}ms cubic-bezier(0.22, 1, 0.36, 1)`;
      this.shadowRoot.getElementById("card").style.animation = animation;
      window.setTimeout(() => {
        this.shadowRoot.getElementById("card").style.animation = "none";
      }, animation_speed_ms)
    ]]]
  action: toggle
  haptic: medium
styles:
  grid:
    - grid-template-areas: |
        "icon  circle"
        "n     n"
        "s     s"
    - grid-template-columns: repeat(2, 1fr)
    - grid-template-rows: auto repeat(2, min-content)
    - gap: 2%
    - align-items: start
  name:
    - justify-self: start
    - line-height: 115%
  state:
    - justify-self: start
    - line-height: 115%
  card:
    - font-family: Sf Display
    - border-radius: var(--custom-button-card-border-radius)
    - -webkit-tap-highlight-color: rgba(0,0,0,0)
    - transition: none
    - padding: 10%
    - --mdc-ripple-color: >
        [[[
          return variables.consider_on ?
            'rgb(0, 0, 0)' :
            'rgba(255, 255, 255, 0.3)';
        ]]]
    - color: >
        [[[
          return variables.consider_on ?
            'rgba(0, 0, 0, 0.6)' :
            'rgba(255, 255, 255, 0.3)';
        ]]]
    - background-color: >
        [[[
          return variables.consider_on ?
            'rgba(255, 255, 255, 0.8)' :
            'rgba(115, 115, 115, 0.2)';
        ]]]
extra_styles: |
  [[[
    if (entity) {
      let hs = entity.attributes.hs_color == undefined;
      let h = hs || entity.attributes.hs_color[0];
      let s = hs || entity.attributes.hs_color[1];
      let l_min = 28;
      let l_max = 48;
      let l_calc =
        ((entity.attributes.brightness / 2.54) * (l_max - l_min)) / 100 + l_min;
      var light_color =
        entity.attributes.color_mode === 'color_temp'
          ? `hsl(204, 58%, ${l_calc}%);`
          : `hsl(${h}, ${s}%, ${l_calc}%);`;
    }
    return `
      svg {
        --light-color:
        ${ variables.state === 'on' && entity.attributes.brightness != undefined
            ? light_color
            : variables.state === 'on' && entity.attributes.brightness == undefined
            ? 'var(--state-icon-active-color);'
            : 'var(--state-icon-color);'
        }
      }

      #name, #state {
        font-size: 1.34vw;
        letter-spacing: 0.05vw;
      }
      /* portrait */
      @media screen and (max-width: 1200px) {
        #name, #state {
          font-size: 2vw;
          letter-spacing: 0.05vw;
        }
      }
      /* phone */
      @media screen and (max-width: 800px) {
        #name, #state {
          font-size: 3.1vw;
          letter-spacing: 0.12vw;
        }
      }
      @keyframes card_bounce {
        0% {
          transform: scale(1);
        }
        15% {
          transform: scale(0.9);
        }
        25% {
          transform: scale(1);
        }
        30% {
          transform: scale(0.98);
        }
        100% {
          transform: scale(1);
        }
      }
    `
  ]]]
