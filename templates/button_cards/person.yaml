---
template:
  - base
  - circle
state_display: >
  [[[ return variables.state === 'home' ? 'Home' : 'Away'; ]]]
triggers_update: sensor.time
styles:
  custom_fields:
    icon:
      - clip-path: circle()
      - width: 79%
      - pointer-events: none
      - display: grid
custom_fields:
  icon: >
    [[[
      const profile_pic = entity && states[entity.entity_id].attributes.entity_picture;
      return profile_pic ? `<img src="${profile_pic}" width="100%" />` : '<ha-icon icon="mdi:account" style="width: 100%;" />';
    ]]]
  circle: >
    [[[
      const time = c => {
        const s = (c / 1000);
        const m = (c / (1000 * 60));
        const h = (c / (1000 * 60 * 60));
        const d = (c / (1000 * 60 * 60 * 24));
        if (s < 60) {
          return parseInt(s) + 's';
        } else if (m < 60) {
          return parseInt(m) + 'm';
        } else if (h < 24) {
          return parseInt(h) + 'h';
        } else {
          return parseInt(d) + 'd';
        }
      };
      let last_changed = entity === undefined  ? ' ' : (time(Date.now() - Date.parse(states[entity.entity_id].last_changed)));
      const stroke_color = variables.state === 'home' ? '#b2b2b2' : 'none';
      const fill_color = variables.state === 'not_home' ? 'rgba(255,255,255,0.04)' : 'none';
      return `
        <svg viewBox="0 0 50 50">
          <circle cx="25" cy="25" r="20.5" stroke="${stroke_color}" stroke-width="1.5" fill="${fill_color}" />
          <text x="50%" y="54%" fill="#8d8e90" font-size="14" text-anchor="middle" alignment-baseline="middle" dominant-baseline="middle">${last_changed}</text>
        </svg>
      `;
    ]]]
